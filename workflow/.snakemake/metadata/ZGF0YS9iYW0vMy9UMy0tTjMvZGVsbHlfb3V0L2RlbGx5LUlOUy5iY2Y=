{"version": null, "code": "gASVpwcAAAAAAAAoQxJ0AGQBfA58EWQCjQMBAGQAUwCUKIwFaW5wdXSUjAZvdXRwdXSUjAZwYXJhbXOUjAl3aWxkY2FyZHOUjAd0aHJlYWRzlIwJcmVzb3VyY2VzlIwDbG9nlIwHdmVyc2lvbpSMBHJ1bGWUjAljb25kYV9lbnaUjA1jb250YWluZXJfaW1nlIwQc2luZ3VsYXJpdHlfYXJnc5SMD3VzZV9zaW5ndWxhcml0eZSMC2Vudl9tb2R1bGVzlIwMYmVuY2hfcmVjb3JklIwFam9iaWSUjAhpc19zaGVsbJSMD2JlbmNoX2l0ZXJhdGlvbpSMD2NsZWFudXBfc2NyaXB0c5SMCnNoYWRvd19kaXKUjA1lZGl0X25vdGVib29rlIwPY29uZGFfYmFzZV9wYXRolIwHYmFzZWRpcpSMGHJ1bnRpbWVfc291cmNlY2FjaGVfcGF0aJSMGF9faXNfc25ha2VtYWtlX3J1bGVfZnVuY5R0lF2UKE5YGQYAAAogICAgICAgIHNldCAteGUKCiAgICAgICAgT1VURElSPSIkKGRpcm5hbWUgIntvdXRwdXR9IikiCiAgICAgICAgUFJFRklYPSIkKGJhc2VuYW1lICJ7b3V0cHV0fSIgLmJjZikiCiAgICAgICAgT1VURklMRT0iJHt7T1VURElSfX0vJHt7UFJFRklYfX0udW5maWx0ZXJlZC5iY2YiCiAgICAgICAgVFNWPSIke3tPVVRESVJ9fS9zYW1wbGVfcGFpcnMudHN2IgoKICAgICAgICAjIGZldGNoIHNhbXBsZSBJRCBmcm9tIGEgQkFNIGZpbGUKICAgICAgICBmdW5jdGlvbiBnZXRfc2FtcF9pZCgpIHt7CiAgICAgICAgICAgIGVjaG8gIiQoc2FtdG9vbHMgdmlldyAtSCAke3sxfX0gfCAgICAgICAgICAgICAgICAgICAgcGVybCAtbG5lICdwcmludCAke3sxfX0gaWYgL1xzU006KFxTKykvJyB8ICAgICAgICAgICAgICAgICAgICBoZWFkIC1uIDEpIgogICAgICAgIH19CgogICAgICAgICMgcnVuIGR1bW15IG9yIHJlYWwgam9iCiAgICAgICAgaWYgWyAie2NvbmZpZy5lY2hvX3J1bn0iIC1lcSAiMSIgXTsgdGhlbgogICAgICAgICAgICBlY2hvICJ7aW5wdXR9IiA+ICJ7b3V0cHV0fSIKICAgICAgICBlbHNlCiAgICAgICAgICAgICMgdXNlIE9wZW5NUCBmb3IgdGhyZWFkZWQgam9icwogICAgICAgICAgICBleHBvcnQgT01QX05VTV9USFJFQURTPXt0aHJlYWRzfQogICAgICAgICAgICAjZXhwb3J0IE9NUF9QUk9DX0JJTkQ9dHJ1ZQogICAgICAgICAgICAjZXhwb3J0IE9NUF9QTEFDRVM9dGhyZWFkcwoKICAgICAgICAgICAgIyBTViBjYWxsaW5nCiAgICAgICAgICAgIGRlbGx5IGNhbGwgICAgICAgICAgICAgICAgIC10ICJ7d2lsZGNhcmRzLnN2X3R5cGV9IiAgICAgICAgICAgICAgICAgLWcgIntpbnB1dC5mYXN0YX0iICAgICAgICAgICAgICAgICAtbyAiJHt7T1VURklMRX19IiAgICAgICAgICAgICAgICAgLXEgMSBgIyBtaW4ucGFpcmVkLWVuZCBtYXBwaW5nIHF1YWxpdHlgICAgICAgICAgICAgICAgICAtcyA5IGAjIGluc2VydCBzaXplIGN1dG9mZiwgREVMcyBvbmx5YCAgICAgICAgICAgICAgICAge3BhcmFtcy5leGNsX29wdH0gICAgICAgICAgICAgICAgICJ7aW5wdXQudHVtb3JfYmFtfSIgIntpbnB1dC5ub3JtYWxfYmFtfSIKICAgICAgICAgICAgIyBzb21hdGljICsgU1YgcXVhbGl0eSBmaWx0ZXJpbmcKICAgICAgICAgICAgIyAgIGNyZWF0ZSBzYW1wbGUgbGlzdAogICAgICAgICAgICBUSUQ9JChnZXRfc2FtcF9pZCAie2lucHV0LnR1bW9yX2JhbX0iKQogICAgICAgICAgICBDSUQ9JChnZXRfc2FtcF9pZCAie2lucHV0Lm5vcm1hbF9iYW19IikKICAgICAgICAgICAgcHJpbnRmICIke3tUSUR9fQl0dW1vcgoke3tDSUR9fQljb250cm9sCiIgPiAke3tUU1Z9fQogICAgICAgICAgICBkZWxseSBmaWx0ZXIgICAgICAgICAgICAgICAgIC1mIHNvbWF0aWMgICAgICAgICAgICAgICAgIC10ICJ7d2lsZGNhcmRzLnN2X3R5cGV9IiAgICAgICAgICAgICAgICAgLXAgICAgICAgICAgICAgICAgIC1zICIke3tUU1Z9fSIgICAgICAgICAgICAgICAgIC1vICJ7b3V0cHV0fSIgICAgICAgICAgICAgICAgICIke3tPVVRGSUxFfX0iCiAgICAgICAgZmkKICAgICAgICCUaA9oEoaUZYwFc2hlbGyUhZR0lC4=", "rule": "delly_p", "input": ["data/bam/3/N3.bam", "data/bam/3/N3.bam.bai", "data/bam/3/T3.bam", "data/bam/3/T3.bam.bai", "data/fasta/chr22.fasta", "data/fasta/chr22.fasta.fai"], "log": [], "params": ["'-x \"data/ENCFF001TDO.bed\"'"], "shellcmd": "\n        set -xe\n\n        OUTDIR=\"$(dirname \"data/bam/3/T3--N3/delly_out/delly-INS.bcf\")\"\n        PREFIX=\"$(basename \"data/bam/3/T3--N3/delly_out/delly-INS.bcf\" .bcf)\"\n        OUTFILE=\"${OUTDIR}/${PREFIX}.unfiltered.bcf\"\n        TSV=\"${OUTDIR}/sample_pairs.tsv\"\n\n        # fetch sample ID from a BAM file\n        function get_samp_id() {\n            echo \"$(samtools view -H ${1} |                    perl -lne 'print ${1} if /\\sSM:(\\S+)/' |                    head -n 1)\"\n        }\n\n        # run dummy or real job\n        if [ \"1\" -eq \"1\" ]; then\n            echo \"data/fasta/chr22.fasta data/fasta/chr22.fasta.fai data/bam/3/T3.bam data/bam/3/T3.bam.bai data/bam/3/N3.bam data/bam/3/N3.bam.bai\" > \"data/bam/3/T3--N3/delly_out/delly-INS.bcf\"\n        else\n            # use OpenMP for threaded jobs\n            export OMP_NUM_THREADS=2\n            #export OMP_PROC_BIND=true\n            #export OMP_PLACES=threads\n\n            # SV calling\n            delly call                 -t \"INS\"                 -g \"data/fasta/chr22.fasta\"                 -o \"${OUTFILE}\"                 -q 1 `# min.paired-end mapping quality`                 -s 9 `# insert size cutoff, DELs only`                 -x \"data/ENCFF001TDO.bed\"                 \"data/bam/3/T3.bam\" \"data/bam/3/N3.bam\"\n            # somatic + SV quality filtering\n            #   create sample list\n            TID=$(get_samp_id \"data/bam/3/T3.bam\")\n            CID=$(get_samp_id \"data/bam/3/N3.bam\")\n            printf \"${TID}\ttumor\n${CID}\tcontrol\n\" > ${TSV}\n            delly filter                 -f somatic                 -t \"INS\"                 -p                 -s \"${TSV}\"                 -o \"data/bam/3/T3--N3/delly_out/delly-INS.bcf\"                 \"${OUTFILE}\"\n        fi\n        ", "incomplete": false, "starttime": 1715288989.8194656, "endtime": 1715289001.843455, "job_hash": 8738506764452, "conda_env": "LS0tCmNoYW5uZWxzOgogIC0gY29uZGEtZm9yZ2UKICAtIGJpb2NvbmRhCgpkZXBlbmRlbmNpZXM6CiAgLSBtYW50YT0xLjEuMAogIC0gZGVsbHk9MC43LjcKICAtIGx1bXB5LXN2PTAuMi4xMwogIC0gZ3JpZHNzPTEuMy40CiAgLSBzYW1ibGFzdGVyPTAuMS4yNAogIC0gYmM9MS4wNgogIC0gci1iYXNlPTMuNS4xCiAgLSBid2E9MC43LjE1CiAgLSBzYW10b29scz0xLjkKICAtIGJjZnRvb2xzPTEuOQo=", "container_img_url": null}