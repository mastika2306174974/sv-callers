{"version": null, "code": "gASVZggAAAAAAAAoQxJ0AGQBfA58EWQCjQMBAGQAUwCUKIwFaW5wdXSUjAZvdXRwdXSUjAZwYXJhbXOUjAl3aWxkY2FyZHOUjAd0aHJlYWRzlIwJcmVzb3VyY2VzlIwDbG9nlIwHdmVyc2lvbpSMBHJ1bGWUjAljb25kYV9lbnaUjA1jb250YWluZXJfaW1nlIwQc2luZ3VsYXJpdHlfYXJnc5SMD3VzZV9zaW5ndWxhcml0eZSMC2Vudl9tb2R1bGVzlIwMYmVuY2hfcmVjb3JklIwFam9iaWSUjAhpc19zaGVsbJSMD2JlbmNoX2l0ZXJhdGlvbpSMD2NsZWFudXBfc2NyaXB0c5SMCnNoYWRvd19kaXKUjA1lZGl0X25vdGVib29rlIwPY29uZGFfYmFzZV9wYXRolIwHYmFzZWRpcpSMGHJ1bnRpbWVfc291cmNlY2FjaGVfcGF0aJSMGF9faXNfc25ha2VtYWtlX3J1bGVfZnVuY5R0lF2UKE5Y2AYAAAogICAgICAgIHNldCAteGUKCiAgICAgICAgIyBpZiAndG1wc3BhY2UnIHNldCB0byA+ME1CIHVzZSBUTVBESVIgb3RoZXJ3aXNlIHVzZSBPVVRESVIKICAgICAgICBPVVRESVI9IiQoZGlybmFtZSAie291dHB1dH0iKSIKICAgICAgICBQUkVGSVg9IiQoYmFzZW5hbWUgIntvdXRwdXR9IiAudmNmKSIKICAgICAgICBPVVRGSUxFPSIke3tPVVRESVJ9fS8ke3tQUkVGSVh9fS51bmZpbHRlcmVkLnZjZiIKICAgICAgICBUTVA9JChbICJ7cmVzb3VyY2VzLnRtcF9tYn0iIC1lcSAiMCIgXSAmJgogICAgICAgICAgICBlY2hvICIke3tPVVRESVJ9fSIgfHwgZWNobyAiJHt7VE1QRElSfX0iKQoKICAgICAgICAjIHNldCBKVk0gbWF4LiBoZWFwIHNpemUgZHluYW1pY2FsbHkgKGluIEdCKQogICAgICAgICMgTi5CLiBkb24ndCBhbGxvY2F0ZSA+MzFHIGR1ZSB0byBDb21wcmVzc2VkIE9vcHMgYW5kIEpESy04MDI5Njc5CiAgICAgICAgTUFYX0hFQVA9JChMQ19BTEw9QyBwcmludGYgIiUuZiIgJChiYyA8PDwgInNjYWxlPTI7ICAgICAgICAgICAgIHtyZXNvdXJjZXMubWVtX21ifSAvIDEwMjQgKiAuOCIpKSAjIG1heC4gODAlIG9mIHJlcXVlc3RlZCBtZW0KICAgICAgICBNQVhfSEVBUD0kKFsgIiR7e01BWF9IRUFQfX0iIC1ndCAiMzEiIF0gJiYgZWNobyAiMzFnIiB8fAogICAgICAgICAgICBlY2hvICIke3tNQVhfSEVBUH19ZyIpCiAgICAgICAgZXhwb3J0IF9KQVZBX09QVElPTlM9Ii1EamF2YS5pby50bXBkaXI9JHt7VE1QfX0gLVhteCR7e01BWF9IRUFQfX0iCgogICAgICAgICMgcnVuIGR1bW15IG9yIHJlYWwgam9iCiAgICAgICAgaWYgWyAie2NvbmZpZy5lY2hvX3J1bn0iIC1lcSAiMSIgXTsgdGhlbgogICAgICAgICAgICBlY2hvICJ7aW5wdXR9IiAiJHt7VE1QfX0iID4gIntvdXRwdXR9IgogICAgICAgIGVsc2UKICAgICAgICAgICAgIyBjbGVhbi11cCBvdXRkaXIgcHJpb3IgdG8gU1YgY2FsbGluZwogICAgICAgICAgICBybSAtZnIgJHt7T1VURElSfX0vKmdyaWRzcyoKICAgICAgICAgICAgZ3JpZHNzIGdyaWRzcy5DYWxsVmFyaWFudHMgICAgICAgICAgICAgICAgIFdPUktFUl9USFJFQURTPXt0aHJlYWRzfSAgICAgICAgICAgICAgICAgUkVGRVJFTkNFX1NFUVVFTkNFPSJ7aW5wdXQuZmFzdGF9IiAgICAgICAgICAgICAgICAge3BhcmFtcy5leGNsX29wdH0gICAgICAgICAgICAgICAgIElOUFVUPSJ7aW5wdXQubm9ybWFsX2JhbX0iICAgICAgICAgICAgICAgICBJTlBVVD0ie2lucHV0LnR1bW9yX2JhbX0iICAgICAgICAgICAgICAgICBPVVRQVVQ9IiR7e09VVEZJTEV9fSIgICAgICAgICAgICAgICAgIEFTU0VNQkxZPSIke3tPVVRESVJ9fS9ncmlkc3NfYXNzZW1ibHkuYmFtIiAgICAgICAgICAgICAgICAgV09SS0lOR19ESVI9IiR7e1RNUH19IiAgICAgICAgICAgICAgICAgVE1QX0RJUj0iJHt7VE1QfX0vZ3JpZHNzLiR7e1JBTkRPTX19IgogICAgICAgICAgICAjIHNvbWF0aWMgKyBTViBxdWFsaXR5IGZpbHRlcmluZwogICAgICAgICAgICAjICAgJ25vcm1hbCcgc2FtcGxlIGFzc3VtZXMgaW5kZXggMAogICAgICAgICAgICBiY2Z0b29scyBmaWx0ZXIgICAgICAgICAgICAgICAgIC1PIHYgYCMgdW5jb21wcmVzc2VkIFZDRiBmb3JtYXRgICAgICAgICAgICAgICAgICAtbyAie291dHB1dH0iICAgICAgICAgICAgICAgICAtaSAiRk9STUFUL1FVQUxbMF0gPT0gMCAmJiBGSUxURVIgPT0gJy4nIiAgICAgICAgICAgICAgICAgIiR7e09VVEZJTEV9fSIKICAgICAgICBmaQogICAgICAgIJRoD2gShpRljAVzaGVsbJSFlHSULg==", "rule": "gridss_p", "input": ["data/bam/3/N3.bam", "data/bam/3/N3.bam.bai", "data/bam/3/T3.bam", "data/bam/3/T3.bam.bai", "data/fasta/chr22.fasta", "data/fasta/chr22.fasta.amb", "data/fasta/chr22.fasta.ann", "data/fasta/chr22.fasta.bwt", "data/fasta/chr22.fasta.fai", "data/fasta/chr22.fasta.pac", "data/fasta/chr22.fasta.sa"], "log": [], "params": ["'BLACKLIST=data/ENCFF001TDO.bed'"], "shellcmd": "\n        set -xe\n\n        # if 'tmpspace' set to >0MB use TMPDIR otherwise use OUTDIR\n        OUTDIR=\"$(dirname \"data/bam/3/T3--N3/gridss_out/gridss.vcf\")\"\n        PREFIX=\"$(basename \"data/bam/3/T3--N3/gridss_out/gridss.vcf\" .vcf)\"\n        OUTFILE=\"${OUTDIR}/${PREFIX}.unfiltered.vcf\"\n        TMP=$([ \"0\" -eq \"0\" ] &&\n            echo \"${OUTDIR}\" || echo \"${TMPDIR}\")\n\n        # set JVM max. heap size dynamically (in GB)\n        # N.B. don't allocate >31G due to Compressed Oops and JDK-8029679\n        MAX_HEAP=$(LC_ALL=C printf \"%.f\" $(bc <<< \"scale=2;             63488 / 1024 * .8\")) # max. 80% of requested mem\n        MAX_HEAP=$([ \"${MAX_HEAP}\" -gt \"31\" ] && echo \"31g\" ||\n            echo \"${MAX_HEAP}g\")\n        export _JAVA_OPTIONS=\"-Djava.io.tmpdir=${TMP} -Xmx${MAX_HEAP}\"\n\n        # run dummy or real job\n        if [ \"1\" -eq \"1\" ]; then\n            echo \"data/fasta/chr22.fasta data/fasta/chr22.fasta.fai data/fasta/chr22.fasta.bwt data/fasta/chr22.fasta.amb data/fasta/chr22.fasta.ann data/fasta/chr22.fasta.pac data/fasta/chr22.fasta.sa data/bam/3/T3.bam data/bam/3/T3.bam.bai data/bam/3/N3.bam data/bam/3/N3.bam.bai\" \"${TMP}\" > \"data/bam/3/T3--N3/gridss_out/gridss.vcf\"\n        else\n            # clean-up outdir prior to SV calling\n            rm -fr ${OUTDIR}/*gridss*\n            gridss gridss.CallVariants                 WORKER_THREADS=16                 REFERENCE_SEQUENCE=\"data/fasta/chr22.fasta\"                 BLACKLIST=data/ENCFF001TDO.bed                 INPUT=\"data/bam/3/N3.bam\"                 INPUT=\"data/bam/3/T3.bam\"                 OUTPUT=\"${OUTFILE}\"                 ASSEMBLY=\"${OUTDIR}/gridss_assembly.bam\"                 WORKING_DIR=\"${TMP}\"                 TMP_DIR=\"${TMP}/gridss.${RANDOM}\"\n            # somatic + SV quality filtering\n            #   'normal' sample assumes index 0\n            bcftools filter                 -O v `# uncompressed VCF format`                 -o \"data/bam/3/T3--N3/gridss_out/gridss.vcf\"                 -i \"FORMAT/QUAL[0] == 0 && FILTER == '.'\"                 \"${OUTFILE}\"\n        fi\n        ", "incomplete": false, "starttime": 1715288985.4154694, "endtime": 1715288987.6634674, "job_hash": 8738506764676, "conda_env": "LS0tCmNoYW5uZWxzOgogIC0gY29uZGEtZm9yZ2UKICAtIGJpb2NvbmRhCgpkZXBlbmRlbmNpZXM6CiAgLSBtYW50YT0xLjEuMAogIC0gZGVsbHk9MC43LjcKICAtIGx1bXB5LXN2PTAuMi4xMwogIC0gZ3JpZHNzPTEuMy40CiAgLSBzYW1ibGFzdGVyPTAuMS4yNAogIC0gYmM9MS4wNgogIC0gci1iYXNlPTMuNS4xCiAgLSBid2E9MC43LjE1CiAgLSBzYW10b29scz0xLjkKICAtIGJjZnRvb2xzPTEuOQo=", "container_img_url": null}