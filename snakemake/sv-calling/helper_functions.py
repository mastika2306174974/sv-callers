import os

from snakemake import load_configfile
from csv import DictReader


config = load_configfile('analysis.yaml')

def get_callers():
    """Get a list of SV callers enabled by a user.
    """
    callers = []
    for c in config["enable_callers"]:
        assert c in config["callers"], \
            "SV caller '{}' is not supported!".format(c)
        callers.append(c)
    return callers


def get_filext(fmt):
    """Get file extension(s) given file type/format:
        ['fasta', 'fasta_idx', 'bam', 'bam_idx', 'vcf']
    """
    assert fmt in config["file_exts"].keys(), \
        "Unknown input file format '{}'.".format(fmt.lower())
    return config["file_exts"][fmt]


def get_fasta():
    """Get reference genome in FASTA.
    """
    return config["genome_path"] + get_filext("fasta")


def get_faidx():
    """Get FASTA index files generated by faidx and bwa tools.
    """
    return [config["genome_path"] + fext for fext in get_filext("fasta_idx")]


def get_outdir(caller):
    """Get the caller's output directory.
    """
    return config["callers"][caller]["outdir"]


def get_nthreads(caller):
    """Get the number of threads used by a caller.
    """
    if "threads" in config["callers"][caller]:
        return config["callers"][caller]["threads"]
    else:
        return 1  # default: one thread


def get_memory(caller):
    """Get the amount of allocated memory (MB) by a caller.
    """
    if "memory" in config["callers"][caller]:
        return config["callers"][caller]["memory"]
    else:
        return 1024  # default: 1GB


def get_tmpspace(caller):
    """Get the amount of temporary disk space (MB) requested by a caller.
    """
    if "tmpspace" in config["callers"][caller]:
        return config["callers"][caller]["tmpspace"]
    else:
        return 0  # default: no temp space


def make_output():
    """Collect output filenames (.vcf) to drive the workflow.
    """
    with open(config["samples"], 'r') as fin:
        reader = DictReader(fin)
        outfiles = []
        for r in reader:
            for c in get_callers():
                path = os.path.join(r["PATH"], r["TUMOR"] + "--" + r["NORMAL"],
                                    get_outdir(c))
                outfiles.append(os.path.join(path, c + get_filext("vcf")))
        return outfiles
