#
# This workflow executes SV callers on tumor-normal sample pairs.
#

from csv import DictReader

shell.executable("/bin/bash")
configfile: "config.yaml"

CALLERS = [c for c in config["sv_callers"].keys()
           if config["sv_callers"][c]["enabled"] is True]


def get_filext(fmt):
    """Get file extension(s) given file type/format:
        ['fasta', 'fasta_idx', 'bam', 'bam_idx']
    """
    assert fmt in config["file_exts"].keys(), \
        "Unknown input file format '{}'.".format(fmt.lower())
    return config["file_exts"][fmt]


def get_fasta():
    """Get reference genome in FASTA.
    """
    return config["genome_path"] + get_filext("fasta")


def get_faidx():
    """Get FASTA index files generated by faidx and bwa tools.
    """
    return [config["genome_path"] + fext for fext in get_filext("fasta_idx")]


def get_outdir(caller):
    """Get the caller's output directory.
    """
    return config["sv_callers"][caller]["outdir"]


def get_nthreads(caller):
    """Get the number of threads used by a caller.
    """
    if "threads" in config["sv_callers"][caller]:
        return config["sv_callers"][caller]["threads"]
    else:
        return 1  # default: one thread


def get_memory(caller):
    """Get the amount of memory (MB) allocated for a caller.
    """
    if "memory" in config["sv_callers"][caller]:
        return config["sv_callers"][caller]["memory"]
    else:
        return 1024  # default: 1GB


def get_tmpspace(caller):
    """Get the amount of temporary disk space (MB) requested for a caller.
    """
    if "tmpspace" in config["sv_callers"][caller]:
        return config["sv_callers"][caller]["tmpspace"]
    else:
        return 0  # default: no temp space


def collect_logs(callers):
    """Generate (dummy) logs for all sample pairs to drive the workflow.
    """
    sv_types = config["sv_callers"]["delly"]["sv_types"]
    with open(config["samples"], 'r') as fin:
        reader = DictReader(fin)
        logs = []
        for r in reader:
            for c in callers:
                path = os.path.join(r["PATH"], r["TUMOR"] + "--" + r["NORMAL"],
                                    get_outdir(c))
                if "delly" in c:  # *.log per delly SV type
                    for sv in sv_types:
                        logs.append(os.path.join(path, c + "-" + sv + ".log"))
                else:  # *.log per caller
                    logs.append(os.path.join(path, c + ".log"))
        return logs


localrules: all

rule all:
    input:
        collect_logs(CALLERS)


include: "rules/manta.smk"
include: "rules/delly.smk"
include: "rules/lumpy.smk"
include: "rules/gridss.smk"
